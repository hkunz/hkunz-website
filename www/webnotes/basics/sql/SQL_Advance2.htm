<!DOCTYPE html>
<html>
<!-- 
    DISCUSSIONS:  
	SQL Create (Database, Table, and Index)
	SQL Drop (Index, Table and Database)
	SQL Alter
	SQL Functions
	SQL Group By
	SQL Select Into
	SQL Create View
	SQL Server
-->
<head>
<title>(3/3) SQL Tutorials</title>
<style type="text/css">
<!--
body{font-family:arial}
h2{background-color:lime}
h2:first-letter{float: top;width: 0.7em; font-size: 200%; font-family: algerian;}
code,pre{font-size:18;color:red;}
-->
</style>

</head>

<body bgcolor="#FFFF99">

<h2>SQL CREATE (Database, Table, and Index)</h2>
<h3 style="background:#FF6633">&nbsp;Create a database:</h3>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>CREATE DATABASE </b><i>database_name</i></code></td></tr>
</tbody></table>
<h3 style="background:#FF6633">&nbsp;Create a table in a database:</h3>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>CREATE TABLE </b><i>table_name</i><br />
&nbsp;{<br /><i>&nbsp;&nbsp;column_name1 data_type</i>,<br />
<i>&nbsp;&nbsp;column_name2 data_type</i>,<br />
<i>&nbsp;&nbsp;... </i>...<br />
&nbsp;}</code></td></tr>
</tbody></table><hr />

<p>Create a table named "Persons" with four columns named "LastName", "FirstName", "Address", and "Age". you can specify a maximum length for some columns:</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>CREATE TABLE </b><i>table_name</i><br />
&nbsp;{<br /><i>&nbsp;&nbsp;LastName varchar(30)</i>,<br />
<i>&nbsp;&nbsp;FirstName varchar</i>,<br />
<i>&nbsp;&nbsp;Address varchar</i><br />
<i>&nbsp;&nbsp;Age int(3)</i><br />
&nbsp;}</code></td></tr>
</tbody></table><br /><hr />

<p>The <b>data type </b>specifies what type of data the column can hold. The table below contains the most common data types in SQL:</p>
<table class="ex" border="1">
<tbody><tr>
    <th align="left" valign="top" width="35%">Data Type</th>
    <th align="left" valign="top" width="65%">Description</th>
  </tr><tr>
    <td valign="top"><code style="color:blue"><b>&nbsp;integer(size)<br />
      &nbsp;int(size)<br />
      &nbsp;smallint(size)<br />
      &nbsp;tinyint(size)</b></code></td>
    <td valign="top">Hold integers only. The maximum number of digits are specified in
      parenthesis.</td>
  </tr><tr>
    <td valign="top"><code style="color:blue"><b>&nbsp;decimal(size,d)<br />
      &nbsp;numeric(size,d)</b></code></td>
    <td valign="top">Hold numbers with fractions. The maximum number of digits are specified in
      "size". The maximum number of digits to the right of the decimal is
      specified in "d".</td>
  </tr><tr>
    <td valign="top"><code style="color:blue"><b>&nbsp;char(size)</b></code></td>
    <td valign="top"> Holds a fixed length string (can contain letters, numbers, and special
      characters). The fixed size is specified in parenthesis.</td>
  </tr><tr>
    <td valign="top"><code style="color:blue"><b>&nbsp;varchar(size)</b></code></td>
    <td valign="top">Holds a variable length string (can contain letters, numbers, and special
      characters). The maximum size is specified in parenthesis.</td>
  </tr><tr>
    <td valign="top"><code style="color:blue"><b>&nbsp;date(yyyymmdd)</b></code></td>
    <td valign="top">Holds a date</td>
  </tr>
</tbody></table><br /><hr />

<h3 style="background:#FF6633">&nbsp;Create Index</h3>
<p>Indices are created in an existing table to locate rows more quickly and efficiently. It is possible to create an index on one or more columns of a table, and each index is given a name. The users cannot see the indexes, they are just used to speed up queries.</p> 
<p><b>Note: </b>Updating a table containing indexes takes more time than updating a table without, this is because the indexes also need an update. So, it is a good idea to create indexes only on columns that are often used for a search.</p>

<h3><span style="background:lime">&nbsp;Unique Index&nbsp;</span></h3>
<p>Creates a unique index on a table. A unique index means that two rows cannot have the same index value.</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>CREATE UNIQUE INDEX </b><i>index_name</i><br />&nbsp;<b>ON </b>
<i>table_name (column_name)</i></code></td></tr>
</tbody></table>
<p>The "column_name" specifies the column you want indexed.</p>

<h3><span style="background:lime">&nbsp;Simple Index&nbsp;</span></h3>
<p>Creates a simple index on a table. When the UNIQUE keyword is omitted, duplicate values are allowed.</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>CREATE INDEX </b><i>index_name</i><br />&nbsp;<b>ON </b>
<i>table_name (column_name/s)</i></code></td></tr>
</tbody></table><hr />

<p>This example creates a simple index, named "PersonIndex", on the
LastName field of the Person table:</p>

<table class="ex" border="1">
<tbody><tr><td><code>&nbsp;<b>CREATE INDEX </b><i>PersonIndex</i><br />
&nbsp;<b>ON </b><i>Person </i>(<i>LastName</i>)</code>
</td></tr></tbody></table>

<p>If you want to index the values in a column in <b>descending</b> order, you
can add the reserved word <b>DESC</b> after the column name:</p>

<table class="ex" border="1">
<tbody><tr><td><code>&nbsp;<b>CREATE INDEX </b><i>PersonIndex</i><br />
&nbsp;<b>ON </b><i>Person </i>(<i>LastName </i><b>DESC</b>)</code>
</td></tr></tbody></table>

<p>If you want to index more than one column you can list the column names 
within the parentheses, separated by commas:</p>

<table class="ex" border="1">
<tbody><tr><td><code>&nbsp;<b>CREATE INDEX </b><i>PersonIndex</i><br />
&nbsp;<b>ON </b><i>Person </i>(<i>LastName, FirstName</i>)</code>
</td></tr></tbody></table><br /><hr />

<h2>SQL Drop (Index, Table and Database)</h2>

<h3 style="background:#FF6633">Drop Index</h3>
<p>You can delete an existing index in a table with the DROP INDEX statement.</p>

Syntax for Microsoft SQLJet (and Microsoft Access):
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>DROP INDEX </b><i>index_name </i><b>ON </b><i>table_name</i></code></td></tr>
</tbody></table>

Syntax for MS SQL Server:
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>DROP INDEX </b><i>table_name.index_name</i></code></td></tr>
</tbody></table>
Syntax for IBM DB2 and Oracle:
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>DROP INDEX </b><i>index_name</i></code></td></tr>
</tbody></table>

Syntax for MySQL:
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>ALTER TABLE </b><i>table_name </i><b>DROP INDEX </b><i>index_name</i></code></td></tr>
</tbody></table>
ALTER TABLE table_name DROP INDEX index_name

<h3 style="background:#FF6633">Delete a Table or Database</h3>
<p>To delete a table (the table structure, attributes, and indexes will also be deleted):</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>DROP TABLE </b><i>table_name</i></code></td></tr>
</tbody></table>
<p>To delete a database:</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>DROP DATABASE </b><i>database_name</i></code></td></tr>
</tbody></table>

<h3 style="background:#FF6633">Truncate a Table</h3>
<p>What if we only want to get rid of the data inside a table, and not the table itself? Use the TRUNCATE TABLE command (deletes only the data inside the table):</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>TRUNCATE TABLE </b><i>table_name</i></code></td></tr>
</tbody></table><br /><hr />

<h2>SQL ALTER TABLE</h2>
<p>The <b>ALTER TABLE </b>statement is used to add or drop columns in an existing table.</p>

<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>ALTER TABLE </b><i>table_name</i><br />
&nbsp;<b>ADD </b><i>column_name</i> datatype<br /><br />&nbsp;<b>ALTER TABLE </b><i>table_name</i><br />
&nbsp;<b>DROP COLUMN </b><i>column_name</i></code></td></tr></tbody></table>
<p><b>Note: </b>Some database systems don't allow the dropping of a column in a database table (DROP COLUMN column_name).</p><hr />
<p>First example adds the column "MiddleName" while the second example deletes the column "FirstName" from the "Persons" Table</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>ALTER TABLE </b><i>Persons</i><br />
&nbsp;<b>ADD </b><i>MiddleName</i> varchar(30)</code></td></tr></tbody></table>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>ALTER TABLE </b><i>table_name</i><br />
&nbsp;<b>DROP COLUMN </b><i>FirstName</i></code></td></tr></tbody></table>
<hr />

<h2>SQL Functions</h2>
<p><b>SQL has a lot of built-in functions for counting and calculations.</b></p>
<p>The syntax for built-in SQL functions is:</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT function</b>(<i>column_name</i>)<br />&nbsp;<b>FROM </b><i>table_name</i></code></td></tr></tbody></table>
<hr />

<h3>Types of Functions</h3>
<p>There are several basic types and categories of functions in SQL. The basic types of functions are:</p>
<code><b>
&nbsp;&nbsp;&nbsp;<a href="#Agg" style="text-decoration:none">* Aggregate Functions</a><br />
&nbsp;&nbsp;&nbsp;<a href="#Sca" style="text-decoration:none">* Scalar functions</a>
</b></code><br /><hr />

<h3 id="Agg" style="background:red">Aggregate functions</h3>
<p><b>Aggregate functions - </b>operate against a collection of values, but return a single value.</p>
<p><b>Note: </b>If used among many other expressions in the item list of a SELECT statement, the SELECT must have a GROUP BY clause!!</p><hr />

<h4>"Persons" table (used in most examples)</h4>
<table class="ex" border="1">
    <tbody><tr>
      <th align="left">Name</th>
      <th align="left">Age</th>
    </tr><tr>
      <td>Kunz, Harry Roland</td>
      <td>34</td>
    </tr><tr>
      <td>Gutierrez, Hanna</td>
      <td>45</td>
    </tr><tr>
      <td>Pettersen, Kari</td>
      <td>19</td>
    </tr>    
</tbody></table>

<h4><span style="background:lime">&nbsp;Aggregate functions in MS Access&nbsp;</span></h4>
<table class="ex" border="1">
    <tbody><tr>
      <th align="left" valign="top" width="30%">Function</th>
      <th align="left" valign="top" width="70%">Description</th>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/avg.htm">AVG(column)</a></td>
      <td align="left" valign="top">Returns the average value of a column</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/count.htm">COUNT(column)</a></td>
      <td align="left" valign="top">Returns the number of rows (without a NULL 
      value) of a column</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/count_ast.htm">COUNT(*)</a></td>
      <td align="left" valign="top">Returns the number of selected rows</td>
    </tr><tr>
      <td align="left" valign="top">FIRST(column)</td>
      <td align="left" valign="top">Returns the value of the first record in a 
      specified field</td>
    </tr><tr>
      <td align="left" valign="top">LAST(column)</td>
      <td align="left" valign="top">Returns the value of the last record in a 
      specified field</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/max.htm">MAX(column)</a></td>
      <td align="left" valign="top">Returns the highest value of a column</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/min.htm">MIN(column)</a></td>
      <td align="left" valign="top">Returns the lowest value of a column</td>
    </tr><tr>
      <td align="left" valign="top">STDEV(column)</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr><tr>
      <td align="left" valign="top">STDEVP(column)</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/sum.htm">SUM(column)</a></td>
      <td align="left" valign="top">Returns the total sum of a column</td>
    </tr><tr>
      <td align="left" valign="top">VAR(column)</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr><tr>
      <td align="left" valign="top">VARP(column)</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr>
</tbody></table>

<h4><span style="background:lime">&nbsp;Aggregate functions in SQL Server&nbsp;</span></h4>
<table class="ex" border="1">
    <tbody><tr>
      <th align="left" valign="top" width="30%">Function</th>
      <th align="left" valign="top" width="70%">Description</th>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/avg.htm">AVG(column)</a></td>
      <td align="left" valign="top">Returns the average value of a column</td>
    </tr><tr>
      <td align="left" valign="top">BINARY_CHECKSUM</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr><tr>
      <td align="left" valign="top">CHECKSUM</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr><tr>
      <td align="left" valign="top">CHECKSUM_AGG</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/count.htm">COUNT(column)</a></td>
      <td align="left" valign="top">Returns the number of rows (without a NULL 
      value) of a column</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/count_ast.htm">COUNT(*)</a></td>
      <td align="left" valign="top">Returns the number of selected rows</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/count_distinct.htm">COUNT(DISTINCT column)</a></td>
      <td align="left" valign="top">Returns the number of distinct results</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/first.htm">FIRST(column)</a></td>
      <td align="left" valign="top">Returns the value of the first record in a 
      specified field<br />(not supported in SQLServer2K)</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/last.htm">LAST(column)</a></td>
      <td align="left" valign="top">Returns the value of the last record in a 
      specified field<br />(not supported in SQLServer2K)</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/max.htm">MAX(column)</a></td>
      <td align="left" valign="top">Returns the highest value of a column</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/min.htm">MIN(column)</a></td>
      <td align="left" valign="top">Returns the lowest value of a column</td>
    </tr><tr>
      <td align="left" valign="top">STDEV(column)</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr><tr>
      <td align="left" valign="top">STDEVP(column)</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr><tr>
      <td align="left" valign="top"><a href="Functions/sum.htm">SUM(column)</a></td>
      <td align="left" valign="top">Returns the total sum of a column</td>
    </tr><tr>
      <td align="left" valign="top">VAR(column)</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr><tr>
      <td align="left" valign="top">VARP(column)</td>
      <td align="left" valign="top">&nbsp;</td>
    </tr>
</tbody></table><br /><hr />


<h3 id="Sca" style="background:red">Scalar functions</h3>
<p>Scalar functions operate against a single value, and return a single value 
based on the input value.</p>
<h4><span style="background:lime">&nbsp;Useful Scalar Functions in MS Access&nbsp;</span></h4>
<table class="ex" border="1">
    <tbody><tr>
      <th align="left" valign="top" width="30%">Function</th>
      <th align="left" valign="top" width="70%">Description</th>
    </tr><tr>
      <td align="left" valign="top">UCASE(c)</td>
      <td align="left" valign="top">Converts a field to upper case</td>
    </tr><tr>
      <td align="left" valign="top">LCASE(c)</td>
      <td align="left" valign="top">Converts a field to lower case</td>
    </tr><tr>
      <td align="left" valign="top">MID(c,start[,end])</td>
      <td align="left" valign="top">Extract characters from a text field</td>
    </tr><tr>
      <td align="left" valign="top">LEN(c)</td>
      <td align="left" valign="top">Returns the length of a text field</td>
    </tr><tr>
      <td align="left" valign="top">INSTR(c,char)</td>
      <td align="left" valign="top">Returns the numeric position of a named 
      character within a text field</td>
    </tr><tr>
      <td align="left" valign="top">LEFT(c,number_of_char)</td>
      <td align="left" valign="top">Return the left part of a text field 
      requested</td>
    </tr><tr>
      <td align="left" valign="top">RIGHT(c,number_of_char)</td>
      <td align="left" valign="top">Return the right part of a text field 
      requested</td>
    </tr><tr>
      <td align="left" valign="top">ROUND(c,decimals)</td>
      <td align="left" valign="top">Rounds a numeric field to the number of 
      decimals specified</td>
    </tr><tr>
      <td align="left" valign="top">MOD(x,y)</td>
      <td align="left" valign="top">Returns the remainder of a division 
      operation</td>
    </tr><tr>
      <td align="left" valign="top">NOW()</td>
      <td align="left" valign="top">Returns the current system date</td>
    </tr><tr>
      <td align="left" valign="top">FORMAT(c,format)</td>
      <td align="left" valign="top">Changes the way a field is displayed</td>
    </tr><tr>
      <td align="left" valign="top">DATEDIFF(d,date1,date2)</td>
      <td align="left" valign="top">Used to perform date calculations</td>
    </tr>
</tbody></table><br /><hr />

<h2>SQL GROUP BY and HAVING</h2>
<p>Aggregate functions (like SUM) often need an added GROUP BY functionality.</p>
<hr />
<h3 style="background-color:red">GROUP BY</h3>
<p><b>GROUP BY...</b> was added to SQL because aggregate functions (like SUM) return the aggregate of all column values every time they are called, and without the GROUP BY function it was impossible to find the sum for each individual group of column values.</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT </b><i>column_name</i>,<b>SUM</b>(<i>column_name</i>)<br />
&nbsp;<b>FROM </b><i>table_name </i><b>GROUP BY </b><i>column_name</i></code></td></tr></tbody></table>

<p>This "<b>Sales</b>" Table:</p>

<table class="ex" border="1">
    <tbody><tr>
      <th align="left">Company</th>
      <th align="left">Amount</th>
    </tr><tr>
      <td>W3Schools</td>
      <td>5500</td>
    </tr><tr>
      <td>IBM</td>
      <td>4500</td>
    </tr><tr>
      <td>W3Schools</td>
      <td>7100</td>
    </tr>
</tbody></table>
<p></p>
<table class="ex" border="1">
<tbody><tr><td><code>&nbsp;<b>SELECT </b><i>Company</i>, <b>SUM</b>(<i>Amount</i>) <b>FROM </b><i>Sales</i></code></td>
</tr></tbody></table>
<p>The above erroneous SQL query Returns this result: </p>
<table class="ex" border="1">
    <tbody><tr>
      <th align="left">Company</th>
      <th align="left">SUM(Amount)</th>
    </tr><tr>
      <td>W3Schools</td>
      <td>17100</td>
    </tr><tr>
      <td>IBM</td>
      <td>17100</td>
    </tr><tr>
      <td>W3Schools</td>
      <td>17100</td>
    </tr>
</tbody></table>
<p><b>The above code is invalid because the column returned is not part of an
aggregate. A GROUP BY clause will solve this problem:</b></p>
<table class="ex" border="1">
<tbody><tr><td><code>&nbsp;<b>SELECT </b><i>Company</i>,<b>SUM</b>(<i>Amount</i>)<b>FROM </b><i>Sales</i>
<br />&nbsp;<b>GROUP BY </b><i>Company</i></code></td>
</tr></tbody></table>
<p>Returns this result:</p>
<table class="ex" border="1">
    <tbody><tr>
      <th align="left">Company</th>
      <th align="left">SUM(Amount)</th>
    </tr><tr>
      <td>W3Schools</td>
      <td>12600</td>
    </tr><tr>
      <td>IBM</td>
      <td>4500</td>
    </tr>
</tbody></table>
<br />
<hr />

<h3 style="background-color:red">HAVING</h3>
<p><b>HAVING... </b>was added to SQL because the WHERE keyword could not be used against aggregate functions (like SUM), and without HAVING... it would be impossible to test for result conditions.</p> 
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT </b><i>column_name</i>,<b>SUM</b>(<i>column_name</i>)<br />
&nbsp;<b>FROM </b><i>table_name </i><b>GROUP BY </b><i>column_name</i><br />
&nbsp;<b>HAVING SUM </b>(<i>column_name</i>) operator <i>value</i></code></td></tr></tbody></table><br /><hr />

<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT </b><i>Company</i>,<b>SUM</b>(<i>Amount</i>)<br />
&nbsp;<b>FROM </b><i>Sales </i><b>GROUP BY </b><i>Company</i><br />
&nbsp;<b>HAVING SUM </b>(<i>Amount</i>) > <i>10000</i></code></td></tr></tbody></table>

<p>Returns this result:</p>
<table class="ex" border="1">
    <tbody><tr>
      <th align="left">Company</th>
      <th align="left">SUM(Amount)</th>
    </tr><tr>
      <td>W3Schools</td>
      <td>12600</td>
    </tr>
</tbody></table>
<br />
<hr />

<h2>SQL SELECT INTO Statement</h2>
<p>The SELECT INTO statement is most often used to create backup copies of tables or for archiving records.</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT </b><i>column_name(s) </i><br />&nbsp;<b>INTO </b><i>new_table </i><b>[IN </b><i>external_database</i><b>]</b><br />&nbsp;<b>FROM </b><i>source_table</i></code></td></tr></tbody></table><br /><hr />

<h3 style="background-color:red">&nbsp;Make a Backup Copy</h3>

<p>The following example makes a backup copy of the "Persons" table:</p>

<table class="ex" border="1">
<tbody><tr><td><code>&nbsp;<b>SELECT </b>* <b>INTO </b><i>Persons_backup</i><br />&nbsp;<b>FROM </b><i>Persons</i></code>
</td></tr></tbody></table>

<p>The IN clause can be used to copy tables into another database:</p>

<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT </b><i>Persons.</i>* <b>INTO </b><i>Persons </i><br />&nbsp;<b>IN </b>'<i>Backup.mdb</i>' <b>FROM </b><i>Persons</i></code></td></tr></tbody></table>

<p>If you only want to copy a few fields, you can do so by listing them after 
the SELECT statement:</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT </b><i>LastName,FirstName </i><br />&nbsp;<b>INTO </b><i>Persons_backup </i><b>FROM </b><i>Persons</i></code></td></tr>
</tbody></table>

<p>You can also add a WHERE clause. The following example 
creates a "Persons_backup" table with two columns (FirstName and 
LastName) by extracting the persons who 
lives in "Sandnes" from the "Persons" 
table:</p>

<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT </b><i>LastName,Firstname </i><br />&nbsp;<b>INTO </b><i>Persons_backup </i><b>FROM </b><i>Persons </i><br />&nbsp;<b>WHERE </b><i>City='Sandnes'</i></code></td></tr>
</tbody></table>

<p>Selecting data from more than one table is also possible. The following example creates 
a new table "Empl_Ord_backup" that contains data from the two tables Employees and 
Orders:</p>

<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT </b><i>Employees.Name,Orders.Product</i><br />
&nbsp;<b>INTO </b><i>Empl_Ord_backup </i><b>FROM </b><i>Employees </i><br />
&nbsp;<b>INNER JOIN </b><i>Orders</i><br />
&nbsp;<b>ON </b><i>Employees.Employee_ID=Orders.Employee_ID</i></code></td></tr>
</tbody></table><br />
<hr />

<h2>SQL CREATE VIEW Statement</h2>
<p><b>A view is a virtual table based on the result-set of a SELECT statement.</b></p><hr />
<p>In SQL, a <b>VIEW </b>is a virtual table based on the result-set of a SELECT statement.</p>
<p><b>A view contains rows and columns</b>, just like a real table. The fields in a view are fields from one or more real tables in the database. You can add SQL functions, WHERE, and JOIN statements to a view and present the data as if the data were coming from a single table.</p>
<p><b>Note: </b>The database design and structure will NOT be affected by the functions, where, or join statements in a view.</p>
<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>CREATE VIEW </b><i>view_name </i><b>AS</b><br />
&nbsp;<b>SELECT </b><i>column_name(s) </i><b>FROM </b><i>table_name</i><br />
&nbsp;<b>WHERE </b><i>condition</i></code></td></tr></tbody></table><br />

<p><b>Note: </b>The database does not store the view data! The database engine recreates the data, using the view's SELECT statement, every time a user queries a view.</p> 
<hr />

<h3 style="background-color:red">Using Views</h3>
<p>A <b>view </b>could be used from inside a query, a stored 
procedure, or from inside another view. By adding functions, joins, etc., to a view, it allows you to present 
exactly the data you want to the user.</p>
<p>The sample database Northwind has some views installed by default. The 
view "Current Product List" lists all active products (products that are not 
discontinued) from the Products table. The view is created with the following 
SQL:</p>

<table class="ex" border="1">
  <tbody><tr><td>
      <code><b>&nbsp;CREATE VIEW [</b><i>Current Product List</i><b>] AS</b><br />
&nbsp;<b>SELECT </b><i>ProductID,ProductName </i><b>FROM </b><i>Products</i><br />
&nbsp;<b>WHERE </b><i>Discontinued=No</i></code></td></tr>
</tbody></table>
<p>We can query the view above as follows:</p>

<table class="ex" border="1">
  <tbody><tr><td><code>&nbsp;<b>SELECT </b>* <b>FROM [</b><i>Current Product List</i><b>]</b></code></td></tr>
</tbody></table>
<p>Another view from the Northwind sample database selects every product in the Products table that has a unit price 
that is higher than the average unit price:</p>

<table class="ex" border="1">
<tbody><tr><td><code><b>&nbsp;CREATE VIEW [</b><i>Products Above Average Price</i><b>] AS</b><br />
&nbsp;<b>SELECT </b><i>ProductName,UnitPrice</i><br />
&nbsp;<b>FROM </b><i>Products</i><br />
&nbsp;<b>WHERE </b><i>UnitPrice</i>&gt;(<b>SELECT AVG</b>(<i>UnitPrice</i>) <b>FROM </b><i>Products</i>)</code>
</td></tr></tbody></table>

<p>We can query the view above as follows:</p>
<table class="ex" border="1">
<tbody><tr><td><code>&nbsp;<b>SELECT </b>* <b>FROM [</b><i>Products Above Average Price</i><b>]</b></code>
</td></tr></tbody></table>
<p>Another example view from the Northwind database calculates 
the total sale for each category in 1997. Note that this view selects its data 
from another view called "Product Sales for 1997":</p>

<table class="ex" border="1">
<tbody><tr><td>
<code>&nbsp;<b>CREATE VIEW [</b><i>Category Sales For 1997</i><b>] AS</b><br />
&nbsp;<b>SELECT DISTINCT </b><i>CategoryName,</i><b>Sum</b>(<i>ProductSales</i>) <b>AS </b><i>CategorySales</i><br />
&nbsp;<b>FROM [</b><i>Product Sales for 1997</i><b>]</b><br />
&nbsp;<b>GROUP BY </b><i>CategoryName</i></code>
</td></tr></tbody></table>
<p>We can query the view above as follows:</p>

<table class="ex" border="1">
<tbody><tr><td><code>&nbsp;<b>SELECT </b>* <b>FROM [</b><i>Category Sales For 1997</i><b>]</b></code>
</td></tr></tbody></table>
<p>We can also add a condition to the query. Now we want to see the total sale 
only for the category "Beverages":</p>

<table class="ex" border="1">
<tbody><tr><td><code>&nbsp;<b>SELECT </b>* <b>FROM [</b><i>Category Sales For 1997</i><b>]</b><br />
&nbsp;<b>WHERE </b><i>CategoryName='Beverages'</i></code>
</td></tr></tbody></table><br />
<hr />

<h2>SQL Servers - RDBMS</h2>
<p><b>Modern SQL Servers are built on RDBMS.</b></p><hr />

<h3><span style="background-color:orange">&nbsp;DBMS&nbsp;</span> - Database Management System</h3>
<ul>
<li>A <span style="color:blue">Database Management System </span>(<b>DBMS</b>) is a computer program that can access data in a database.</li>
<li>The <b>DBMS</b> program enables you to extract, modify, or store information in a database.</li>
<li>Different <b>DBMS</b> programs provides different functions for querying data, reporting data, and modifying data.</li>
</ul>
<hr />
<h3><span style="background-color:orange">&nbsp;RDBMS&nbsp;</span> - Relational Database Management System</h3>
<ul>
<li>A <span style="color:blue">Relational Database Management System </span>(<b>RDBMS</b>) is a Database Management System (<b>DBMS</b>) where the database is organized and accessed according to the relationships between data.</li>
<li><b>RDBMS </b>was invented by <b>IBM </b>in the early <b>1970's</b>.</li>
<li><b>RDBMS </b>is the basis for SQL, and for all modern database systems like Oracle, SQL Server, IBM DB2, Sybase, MySQL, and Microsoft Access.</li>
</ul><hr />

</body>
</html>